{"version":3,"sources":["components/Header.js","components/Footer.js","components/pages/Content.js","components/pages/About.js","components/pages/Contact.js","components/pages/Notfound.js","App.js","serviceWorker.js","index.js"],"names":["Header","hStyle","background","color","margin","padding","react_default","a","createElement","style","this","className","react_router_dom","exact","activeClassName","to","Component","Footer","Content","About","Contact","Notfound","App","basename","process","components_Header","react_router","path","component","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12604307.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n\r\n    hStyle = () => {\r\n        return {\r\n            background: \"grey\",\r\n            color:'white',\r\n            margin:0,\r\n            padding: 10\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={this.hStyle()}>\r\n                <h1>Hello React</h1>\r\n                <ul>\r\n                  <li className=\"navlink\">\r\n                    <NavLink exact className=\"nava\" activeClassName=\"active\" to=\"/\">\r\n                      Home\r\n                    </NavLink>\r\n                  </li>\r\n                  {\" | \"}\r\n                  <li className=\"navlink\">\r\n                    <NavLink className=\"nava\" activeClassName=\"active\" to=\"/about\">\r\n                      About\r\n                    </NavLink>\r\n                  </li>\r\n                  {\" | \"}\r\n                  <li className=\"navlink\">\r\n                    <NavLink className=\"nava\" activeClassName=\"active\" to=\"/contact\">\r\n                      Contact\r\n                    </NavLink>\r\n                  </li>\r\n              </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst Footer = () => {\r\n    let fStyle = {\r\n        background: 'grey',\r\n        color: 'blue',\r\n        margin:0,\r\n        padding: 3\r\n    }\r\n\r\n  return (\r\n    <div style={fStyle}>\r\n      <ul>\r\n          <li className=\"footlink\">\r\n            <NavLink exact activeClassName=\"active\" to=\"/\">\r\n              Home\r\n            </NavLink>\r\n          </li>\r\n            {\" | \"}\r\n          <li className=\"footlink\">\r\n            <NavLink activeClassName=\"active\" to=\"/about\">\r\n              About\r\n            </NavLink>\r\n          </li>\r\n          {\" | \"}\r\n          <li className=\"footlink\">\r\n            <NavLink activeClassName=\"active\" to=\"/contact\">\r\n              Contact\r\n            </NavLink>\r\n          </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react'\r\n\r\nclass Content extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>This is Content</h3>\r\n        <p>This is the paragraph on the home page</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Content;","import React, { Component } from 'react'\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>About Us</h3>\r\n        <p>This is the about page for react router site</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react'\r\n\r\nclass Contact extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Contact Us</h3>\r\n        <p>This is the paragraph</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Notfound extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Page Not Found</h3>\r\n        <p>Go back <Link exact to=\"/\">home</Link></p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Notfound;","import React, { Component } from 'react';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Content from './components/pages/Content';\nimport About from './components/pages/About';\nimport Contact from './components/pages/Contact';\nimport Notfound from './components/pages/Notfound';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Content} />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/contact\" component={Contact} />\n            <Route component={Notfound} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}